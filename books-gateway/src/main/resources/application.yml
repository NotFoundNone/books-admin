server:
  port: 8080

spring:

  cloud:
    gateway:
      routes:
        - id: books-route
          uri: http://domain-service:8081/books
          predicates:
            - Path=/books/**
          filters:
            - name: RedisCacheFilter

  # ----------- REDIS -----------
  redis:
    host: localhost
    port: 6379

  # ----------- RABBITMQ -----------
  rabbitmq:
    host: localhost
    port: 5672
    username: user
    password: password
    virtual-host: vhost

grpc:
  client:
    domain-service:
      address: "static://localhost:9091"
      negotiationType: plaintext

app:
  rabbit:
    exchange: booksExchange
    create-queue: createBookQueue
    update-queue: updateBookQueue
    delete-queue: deleteBookQueue
    create-routing-key: book.create.key
    update-routing-key: book.update.key
    delete-routing-key: book.delete.key
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true

logging:
  level:
    root: INFO
